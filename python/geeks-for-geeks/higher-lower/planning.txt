

custom person files can be loaded from .json

Example File
    [
        {
            "name": ...,
            "followers": ...,
            "description": ...
        },

        {
            "name": ...,
            "followers": ...,
            "description": ...,
        }
    ]

data.py
    handles data files (json files)

    DEFAULT_DATA = path to default .json data file

    class Data:

        loaded_data (list)

        initialize to default data file
            
            if resources folder does not exist
                clear screen
                print unable to find resources folder
                wait for user input 
                exit program
            if resources folder is empty
                clear screen
                print message stating the program will exit due to empty resources folder
                wait for user input
                exit program

            if default file is not found, attempt to load a data file via. load_file()

        game_data() -> list
            returns the person_data to be used during the game

        load_file(json) -> list
            clear screen
            select a datafile to be loaded into the program
            list all files in /resources with index
            retrieve user input

            loaded_data = selection

ascii.py
    file to store ascii art for use in menus

person.py
    class Person(person_data)
        initializes given data (list)
        name = data[name]
        followers = data[followers]
        description = data[description]

        raises error if unable to find above data

game.py

    initialize_person(data: dict) -> Person, boolean:

        if all(key in data for key in ("name","followers", "description")):
            initializes a new Person class using the given data
            return Person, success (true)
        else:
            print error about incomplete person entry
            return None, false
    
        
        

    verify_guess(guess: int, compared: Person, current: Person) -> boolean
        compares the follower count of compared (person) vs. current (person)
        returns true/false

    retrieve_guess(guessed_persons: list)
        retrieves a person to be used for guesses from data.game_data()
        calls on random index in data.game_data() -> selection
        while random index in guessed_persons
            generate new random index -> selection        

        person, success = generate a new Person from given entry

        if success false
            return None, false

        return initialize_person(game_data[selection]), success (bool)

    menu(data_obj: Data, game_data: list, code, status) -> None

        clear screen

        display game title ascii art

        if code == 1
            select_file(data_obj)
        if code == 0
            if status, display status

        display player options
            1. START GAME
            2. CURRENT STREAK 
            3. CHANGE DATA File
            0. END PROGRAM

        retrieve player input
        verify valid user input
        return user input

    
    start_game(game_data: list) -> (code: int, status: str)

        clear screen

        all results stored in game_data 
        begins another round of higher-lower

        print message
        retrieves two individuals from data.py using retrieve_guess()
            first is stored as current (current person), compared (person compared to current)

        if retrieve_guess failed (for either)
            return to menu with code 1 and status

        retrieve user input ('higher', 'lower') case-ignored
        'higher' and 'lower' converted to 0/1 respectively, pass to verify_guess()

        verify_guess() takes in current and compared to verify guess -> returns true/false

        if true:
            print message
            increment correct guesses (game_data["guesses"] += 1)
            increment streak (game_data["streak"] += 1)
        if false:
            print message
            reset streak (game_data["streak" = 0])
            end game, return to menu 

main.py
    
    create game data dictionary
    running

    create new Data obj
    variables for program status and code

    while running()
        begins the primary game loop
        game continues only while the program is running
        create a new Data object to represent person data
        selection = menu(code, status)
        change options depending on selection

            1. START GAME -> start_game()
            2. CURRENT STREAK -> print current_streak from game_data
            3. CHANGE DATA File -> load_file()
            0. END PROGRAM -> set running to false




